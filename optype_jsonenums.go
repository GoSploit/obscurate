// generated by jsonenums -type OpType; DO NOT EDIT

package obscurate

import (
	"encoding/json"
	"fmt"
)

var (
	_OpTypeNameToValue = map[string]OpType{
		"OpXOR": OpXOR,
		"OpAdd": OpAdd,
		"OpSub": OpSub,
		"OpSHL": OpSHL,
		"OpSHR": OpSHR,
	}

	_OpTypeValueToName = map[OpType]string{
		OpXOR: "OpXOR",
		OpAdd: "OpAdd",
		OpSub: "OpSub",
		OpSHL: "OpSHL",
		OpSHR: "OpSHR",
	}
)

func init() {
	var v OpType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_OpTypeNameToValue = map[string]OpType{
			interface{}(OpXOR).(fmt.Stringer).String(): OpXOR,
			interface{}(OpAdd).(fmt.Stringer).String(): OpAdd,
			interface{}(OpSub).(fmt.Stringer).String(): OpSub,
			interface{}(OpSHL).(fmt.Stringer).String(): OpSHL,
			interface{}(OpSHR).(fmt.Stringer).String(): OpSHR,
		}
	}
}

func (r OpType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _OpTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid OpType: %d", r)
	}
	return json.Marshal(s)
}

func (r *OpType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OpType should be a string, got %s", data)
	}
	v, ok := _OpTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid OpType %q", s)
	}
	*r = v
	return nil
}
